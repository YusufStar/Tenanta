version: '3.8'

services:
  # Database
  postgres:
    image: postgres:14-alpine
    container_name: tenanta-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/database/init:/docker-entrypoint-initdb.d
    networks:
      - tenanta-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tenanta_user -d tenanta"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions with multi-database support
  redis:
    image: redis:7-alpine
    container_name: tenanta-redis
    command: redis-server --appendonly yes --databases 32 --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./apps/database/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./apps/database/redis/users.acl:/usr/local/etc/redis/users.acl
    networks:
      - tenanta-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database API Service
  database-api:
    build:
      context: .
      dockerfile: apps/database-api/Dockerfile
    container_name: tenanta-database-api
    env_file:
      - ./apps/database-api/.env
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tenanta-network
    volumes:
      - ./apps/database-api:/app/apps/database-api
      - ./packages:/app/packages
      - /app/node_modules
    restart: unless-stopped

  # Client API Service
  client-api:
    build:
      context: .
      dockerfile: apps/client-api/Dockerfile
    container_name: tenanta-client-api
    env_file:
      - ./apps/client-api/.env
    environment:
      NODE_ENV: development
      DATABASE_API_URL: http://database-api:3001
      REDIS_URL: redis://:tenanta_redis_password@redis:6379/1
    ports:
      - "3002:3002"
    depends_on:
      database-api:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - tenanta-network
    volumes:
      - ./apps/client-api:/app/apps/client-api
      - ./packages:/app/packages
      - /app/node_modules
    restart: unless-stopped

  # Client Frontend
  client:
    build:
      context: .
      dockerfile: apps/client/Dockerfile
    container_name: tenanta-client
    env_file:
      - ./apps/client/.env
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_CLIENT_API_URL: http://localhost:3002
    ports:
      - "3004:3004"
    depends_on:
      - client-api
    networks:
      - tenanta-network
    volumes:
      - ./apps/client:/app/apps/client
      - ./packages:/app/packages
      - /app/node_modules
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tenanta-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - database-api
      - client-api
      - client
    networks:
      - tenanta-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  tenanta-network:
    driver: bridge 