name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # Test Client Application
  test-client:
    name: Test Client
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🧪 Run tests
        run: bun test

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          flags: client
          directory: ./client/coverage

      - name: 🔍 Type check
        run: bun run type-check

      - name: 🧹 Lint
        run: bun run lint

  # Test Database API
  test-api:
    name: Test Database API
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./database-api

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🧪 Run tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret
          NODE_ENV: test
        run: bun test

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          flags: api
          directory: ./database-api/coverage

      - name: 🔍 Lint
        run: bun run lint

  # Build Client
  build-client:
    name: Build Client
    runs-on: ubuntu-latest
    needs: test-client
    defaults:
      run:
        working-directory: ./client

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🏗️ Build application
        run: bun run build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: client-build
          path: client/.next
          retention-days: 7

  # Build Database API
  build-api:
    name: Build Database API
    runs-on: ubuntu-latest
    needs: test-api
    defaults:
      run:
        working-directory: ./database-api

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🏗️ Build application
        run: bun run build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: api-build
          path: database-api/dist
          retention-days: 7

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 🔍 Audit client dependencies
        working-directory: ./client
        run: |
          bun install --frozen-lockfile
          bun audit

      - name: 🔍 Audit API dependencies
        working-directory: ./database-api
        run: |
          bun install --frozen-lockfile
          bun audit

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Test Docker Compose
        run: |
          cp env.example .env
          cp client/env.example client/.env.local
          cp database-api/env.example database-api/.env
          docker-compose config
          docker-compose up -d --build
          sleep 30
          docker-compose ps
          docker-compose logs
          docker-compose down

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-client, build-api, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download client artifacts
        uses: actions/download-artifact@v3
        with:
          name: client-build
          path: client/.next

      - name: 📦 Download API artifacts
        uses: actions/download-artifact@v3
        with:
          name: api-build
          path: database-api/dist

      # Add your deployment steps here
      # Example: Deploy to your server, cloud provider, etc.
      - name: 🚀 Deploy to Production
        run: |
          echo "🚀 Deploying to production..."
          # Add your deployment commands here
